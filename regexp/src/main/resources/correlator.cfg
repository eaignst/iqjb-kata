#########################################
#     MT 2017.08                        #
#     CEA ENGINE CONFIGURATION FILE     #
#                                       #
# This template file is already         #
# EDITed by freemarker markups          #
# based on engine.cfg.template          #
#########################################


latency_limit = 3600;                      # seconds; was called 't_outage_before_dummies'
t_slow_source_jump_length = 600;           # seconds;
source_auto_recover_limit = 500;           # seconds;
cluster_name = "cl05";                  # Name of the cluster, unique within EEA deployment
aesr_configstore = "https://seliics02409e03";
aesr_xml_configstore = "https://seliics02409e03";
correlator_reference_db_address = "seliics02384:5434,seliics02385:5434";

pag_stream_count = "1";                    # The maximum number of output directions
eea_name_service_addresses :( "seliics02405e03:3000" );

eea_snmp_fm_trap_destinations = (
    {
      host_address  = "seliics02405e01";
      port = "8162";
      community_string = "public";
    }
);

internal_state_db :( "localhost:7000" );

processes =  ("esr_esc", "corr", "dcr_corr", "gpeh_avro", "gtpc", "uplane_traf", "uplane_perf", "ims", "msisdn_mapper", "sv", "snmp_agents");

esc_dir = "/data/esc";                    # esc output directory

esr_esc :
{
   file_period = 300;                      # in seconds
   base_port = 15000;                      # output stream allocated port numbers are starting from this number
};

corr :
{
   connect = ("dcr_corr")                  #
   @include "/opt/ericsson/eea/conf/templates/symptom_detection.cfg"
   num_proc = 4;        #
   esr_length = 300;                       #

   outputs = (
      {
        type = "esr";
        format = "json"; # only json is supported for esr
        name = "esr_5min";
        version = 0;
        carrier = (
          {
            type = "esc";
            options = {
              # ESR stream listen address
              pub_addr = "tcp://127.0.0.1";
              # TCP for ESR stream base port
              pub_base_port = 16000;
            }
          }
        );
        content = {
          trigger = {
            exclude = ("failed circuit switched fallback call attempt");
          };
        }
      },
      {
        type = "sadf";
        name = "service_alerts";
        type_options = {
          enrichment: {
            cell_name_enrichment = true;
            device_type_enrichment = true;
            node_name_enrichment = true;
            vip_enrichment = true;
          };
        };

        format = "avro";
        format_options = {
          schema_registry_server = "http://seliics02377e01:18081/"; # Schema registry must be specified
        };

        carrier = ({
          type = "kafka";
          options = {
              servers = ("seliics02377e01:9092","seliics02377e02:9092");
              topic = "service-alert";
          };
        });

        content = {
          trigger = {
            exclude = ("failed csfb call attempt");
          };
        }
      },
      {
        name = "default";
        type = "incident";
        type_options = {
             enrichment: {
                 location = ("cell_name","region3","mcc","mnc","lte_enodeb_name","nr_gnodeb_name");
                 device = ("vendor", "marketing_name");
                 node = ("site", "node" );
                 user = ("arpu","contract_expiration_date","customer_type","customer_class","customer_status","enterprise_group","pct_used","vip_group");
             };
        };
        format ="avro";
        format_options = {
            schema_registry_server = "http://seliics02377e01:18081";
        }
        content = {
            trigger = {
                exclude = ( "video_e_init_time_incident",
                            "video_e_stall_ratio_incident" );
                #include = ( "rtt_incident",
                #            "tcp_tp_class_dl_incident",
                #            "tcp_tp_class_ul_incident",
                #            "tcp_tp_dl_incident",
                #            "tcp_tp_ul_incident",
                #            "video_init_time_incident",
                #            "video_mos_incident",
                #            "video_rebuf_rate_incident",
                #            "video_stall_ratio_incident",
                #            "web_acc_succ_incident",
                #            "web_dl_succ_incident",
                #            "web_dl_time_incident",
                #            "web_tput_incident" );
            };
        };
        carrier = ({
            type = "kafka";
            options = {
                servers = ("seliics02377e01:9092","seliics02377e02:9092");
                topic = "eea-incident-default";
                replication_factor = 2;
                partitions = 25;
            };
        });
      },
      {
        name = "default";
        type = "kpi";
        content = { kpi = { exclude = { volte = ("4g_2g_dataho_sr", "4g_3g_dataho_sr"); }; }; };
        type_options = {
             enrichment: {
                 location = ("cell_name","region3","mcc","mnc","lte_enodeb_name","nr_gnodeb_name" );
                 device = ("vendor", "marketing_name");
                 node = ("site", "node");
                 user = ("arpu","contract_expiration_date","customer_type","customer_class","customer_status","enterprise_group","pct_used","vip_group");
             };
        };
        format ="avro";
        format_options = {
            schema_registry_server = "http://seliics02377e01:18081";
        }
        carrier = ({
            type = "kafka";
            options = {
                servers = ("seliics02377e01:9092","seliics02377e02:9092");
                topic = "eea-kpi-default";
                replication_factor = 2;
                partitions = 25;
                retention_ms = 86400000;
            };
        });
      }
   );
};

dcr_corr :
{
     outputs = ({
        type = "edcr",
        name = "edcr",
        carrier = ({
          type = "kafka";
          options = {
            servers = ("seliics02377e01:9092","seliics02377e02:9092");
            topic = "edcr";
          };
        });
     });
     cell_level_kpis = true;
};


ctum_emu :
{
   connect = ("imsicorr");                 #
};

gpeh_avro :
{
                                           #
   connect = ("corr");                     # Send data to the listed components
   look_back = 600;                        # Time to look back in available data after startup
   custom = (
   # EDIT source name or ZeroMQ address where the GPEH stream is provided by Pag.
   # Example:
   # { source = "<nameservice entry of GPEH stream for 0. instance>"; },
   # { source = "<nameservice entry of GPEH stream for 1. instance>"; },
   # { source = "<nameservice entry of GPEH stream for 2. instance>"; }
     { source = "gpeh::gpeh_avro_0" } ,
     { source = "gpeh::gpeh_avro_1" } ,
     { source = "gpeh::gpeh_avro_2" } ,
     { source = "gpeh::gpeh_avro_3" }
   );
};

# GTP-C component
gtpc :
{
   connect = ("corr", "ctum_emu", "msisdn_mapper");
   look_back = 600;
   custom = (
   # EDIT ZeroMQ address where the GTPC stream is provided by Pag
   # Example:
   # { source = "<nameservice entry of GTPC stream for 0. instance>"; },
   # { source = "<nameservice entry of GTPC stream for 1. instance>"; }
     { source = "gtpc::gtpc_0" },
     { source = "gtpc::gtpc_1" }
   );
};


generic_gpeh_avro :
{
   connect = ("corr");                     # Send data to the listed components
   look_back = 600;                        # Time to look back in available data after startup
   custom = (
   # EDIT source name or ZeroMQ address where the GNA RNC stream is provided by Pag.
   # Example:
   # { source = "tcp://<0. gna host>:5001,tcp://<0. gna host>:5002"; },
   # { source = "tcp://<1. gna host>:5001,tcp://<1. gna host>:5002"; }
   );
};


generic_ebm_avro :
{
   connect = ("corr");                     # Send data to the listed components
   look_back = 600;                        # Time to look back in available data after startup
   custom = (
   # EDIT source name or ZeroMQ address where the GNA SGSN/MME stream is provided by Pag
   # Example:
   # { source = "tcp://<0. gna host>:5001,tcp://<0. gna host>:5002"; },
   # { source = "tcp://<1. gna host>:5001,tcp://<1. gna host>:5002"; }
   );
};


# GTP-U probe perf output
uplane_perf :
{
   connect = ("corr");                     # Send data to the listed components
   look_back = 600;                        # Time to look back in available data after startup
   buffer_size = 120;                      # Buffer size in seconds to handle timestamp reordering in input events (adds latency)
   enabled_event_types = ("tp", "wp", "wr", "video", "mp4", "hls", "rtcp", "rtp", "tsr", "ocei", "tp_udp");
   ott_dimensions = ( "protocol", "functionality", "encapsulation", "encryption", "service-provider", "client-application", "domain");
   custom = (
   # EDIT ZeroMQ address where the uplane_perf stream is provided by Pag
   # Example:
   # { source = "<nameservice entry of UPERF stream for 0. instance>"; },
   # { source = "<nameservice entry of UPERF stream for 1. instance>"; }
     { source = "perf::uplane_perf_0" },
     { source = "perf::uplane_perf_1" }
   );
};

uplane_traf :
{
                                           #
   connect = ("corr");                     # Send data to the listed components
   look_back = 600;                        # Time to look back in available data after startup
   custom = (
   # EDIT ZeroMQ address where the uplane_traf stream is provided by Pag
   # Example:
   # { source = "<nameservice entry of UTRAF stream for 0. instance>"; },
   # { source = "<nameservice entry of UTRAF stream for 1. instance>"; }
     { source = "traf::uplane_traf_0" },
     { source = "traf::uplane_traf_1" }
   );
};

# CDR component for 2G/3G voice
cdr2g3g_avro :
{
                                           #
   connect = ("corr, msisdn_mapper");      # Send data to the listed components
   look_back = 600;                        # Time to look back in available data after startup
   custom = (
   # EDIT source name or ZeroMQ address where the CDR stream is provided by Pag
   # Example:
   # { source = "<nameservice entry of CDR stream for 0. instance>"; }
   );
};

## LTE specific part of the setup

# CTUM component
ctum_avro :
{
                                           #
   connect = ("imsicorr");                 # Send data to the listed components
   look_back = 600;                        # Time to look back in available data after startup
   custom = (
   # EDIT source name or ZeroMQ address where the CTUM stream is provided by Pag
   # Example:
   # { source = "<nameservice entry of CTUM stream for 0. instance>"; },
   # { source = "<nameservice entry of CTUM stream for 1. instance>"; }
   );
};

# CTR component
ctr_avro :
{
   connect = ("imsicorr", "ctum_emu");
   look_back = 60;
   custom = (
   # EDIT source name or ZeroMQ address where the CTR stream is provided by Pag
   # Example:
   # { source = "<nameservice entry of CTR stream for 0. instance>"; },
   # { source = "<nameservice entry of CTR stream for 1. instance>"; }
     { source = "ctr::ctr_avro_0" },
     { source = "ctr::ctr_avro_1" },
     { source = "ctr::ctr_avro_2" },
     { source = "ctr::ctr_avro_3" }
   );
};

generic_ctr_avro :
{
   connect = ("imsicorr", "ctum_emu"); # Send data to the listed components
   look_back = 60;                             #
   custom = (
   # EDIT source name or ZeroMQ address where the GNA eNodeB stream is provided by Pag
   # Example:
   # { source = "tcp://<0. gna host>:5001,tcp://<0. gna host>:5002"; },
   # { source = "tcp://<1. gna host>:5001,tcp://<1. gna host>:5002"; }
   );
};

# IMSI correlator component
imsicorr :
{
   connect = ("corr");
   buffer_size = 5;
};

# Generic KPI component
generic_kpi :
{
   connect = ("corr");                     # Send data to the listed components
   look_back = 600;
   custom = (
   # EDIT source name or ZeroMQ address where Generic KPI stream is provided by Pag
   # { source = "<Address of Generic KPI stream for 0. instance>"; }
   );
   kpi_prefix="3pp";   # EDIT - default value for generic KPI prefix string in ESR.
                       # Important: AESR postgresql db field names should not start with number, db fields are generated from ESR field names
};

# MSISDN mapper component
# Recieves sip procedure and CDR 4G events, and enriches them with imsi based on msisdn,
# if imsi does not present in them.
msisdn_mapper :
{
    connect = ("corr"); # Send data to the listed components
};


# IMS component
ims :
{
                                           #
   connect = ("corr", "msisdn_mapper");    #
   look_back = 600;                        #
   buffer_size = 1;
   custom = (
   # EDIT ZeroMQ address where the IMS event stream is provided by Pag
   # { source = "<nameservice entry of IMS event stream for 0. instance>"; },
   # { source = "<nameservice entry of IMS event stream for 1. instance>"; }
     { source = "ims::ims_0" }
   );
};

# SV component
sv :
{
                                           #
   connect = ("corr");                     #
   look_back = 600;                        #
   custom = (
   # EDIT ZeroMQ address where the SV event stream is provided by Pag
   # { source = "<nameservice entry of IMS event stream for 0. instance>"; },
   # { source = "<nameservice entry of IMS event stream for 1. instance>"; }
   );
};

# AGW core mapper component
# Receives Megaco procedures and Mb core IP+port pairs with IMSI, and sends Mb access IP+port pairs
# with IMSI to agw_access_mapper.
agw_core_mapper :
{
    num_proc = 4; #EDIT Number of processes to start. Suggested number is around the quarter of 'corr.num_proc'
    connect = ("agw_access_mapper"); #Send data to the listed components
};

# AGW access mapper component
# Receives RTP and RTCP records and enriches them with IMSI based on Mb access IP+port.
agw_access_mapper :
{
    num_proc = 4; #EDIT Number of processes to start. Suggested number is around the quarter of 'corr.num_proc'
    connect = ("corr"); #Send data to the listed components
};
